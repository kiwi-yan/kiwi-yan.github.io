<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>死锁的人生</title>
  <subtitle>Life is short and everything is void.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kiwi-yan.github.io/"/>
  <updated>2017-04-16T08:47:53.676Z</updated>
  <id>http://kiwi-yan.github.io/</id>
  
  <author>
    <name>Kiwi Yan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《HTTP权威指南》学习总结1——HTTP协议概述</title>
    <link href="http://kiwi-yan.github.io/2017/04/15/http-intro/"/>
    <id>http://kiwi-yan.github.io/2017/04/15/http-intro/</id>
    <published>2017-04-15T13:01:48.000Z</published>
    <updated>2017-04-16T08:47:53.676Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>本来是计划要翻译HTTP相关rfc文档的，奈何工程量巨大，进度实在太慢，只能放弃，以后有兴趣可以搞一下，因为里面确实有一些很有用的东西，当前学习任务还是将就效率的。终于在一些因素的影响下，我决定在1个月内看完《HTTP权威指南》这本书。从3月13日开始到4月15日，进度还是拖下了，因为游戏太好玩了<span class="emoji"><img src="https://raw.githubusercontent.com/kiwi-yan/blog-file-library/master/_static/image/emoji/grinning.png"></span>。</p>
<p>不说废话，进入正题。</p>
<p>如今我们已进入Web x.0的时代（求x = ?），HTTP协议是Web系统的最基本协议，但是很多开发者都很少系统了解过，殊不知了解HTTP协议可以解决很多开发过程中的疑难杂症。因为自己在两年前学习网络编程的时候想着做个什么东西出来，当时就选了一个HTTP服务器，从此与HTTP结下了不解之缘，工作以后到目前为止主要工作内容就是Web开发，于是又勾起了那段青涩的回忆，也开始想深入了解一下她，于是乎……（对不起我编不下去了），总之，我写下了这几篇博客来作为自己对最近一段时间学习的总结。</p>
<a id="more"></a>
<h3 id="什么是HTTP协议？"><a href="#什么是HTTP协议？" class="headerlink" title="什么是HTTP协议？"></a>什么是HTTP协议？</h3><p>HTTP的全称是<b>H</b>yper<b>t</b>ext <b>T</b>ransfer <b>P</b>rotocal（超文本传输协议），最初是一帮搞核物理实验的人发明出来用来做文件共享的，没想到竟然成为了因特网的发展史上的一次“革命”，让我们感谢一下T. Berners-Lee（没有他的话我也不知道我是搞什么的）。最新的HTTP/2草案已经由IETF在2015年5月发布，但目前HTTP被使用的版本仍以HTTP/1.1为主，所以我也以介绍HTTP/1.1为主（关键是HTTP/2还没有开始了解，后面可能会写一篇介绍HTTP/2的文章）。</p>
<blockquote>
<p>本段信息翻译自rfc1945<br>HTTP（Hypertext Transfer Protocol，超文本传输协议）是一个应用层协议，它拥有分布式的、协作的、超媒体的信息系统对灵活性及速度的要求。它是一个通用的、无状态的、面向对象的协议，通过对它的请求方法（命令）进行扩展，可以被用于多种用途，例如名称服务器、分布式对象管理系统。HTTP的一个特性是它的数据表现类型允许系统的构建不需要依赖所传输的数据。<br>HTTP自从1990年就在WWW（World-Wide Web，万维网）上被广泛使用。</p>
<p>本段摘自维基百科<br>名称服务器（英语：name server或nameserver）是指提供域名服务协议的程序或服务器。它可以将“人类可识别”的标识符，映射为系统内部通常为数字形式的标识码。域名系统（DNS）服务器是最著名的名称服务器。</p>
</blockquote>
<p>所以我们知道了HTTP实际上主要是用来做资源共享的，它是Web服务器与Web客户端使用的应用层通信协议：Web客户端向Web服务器请求Web资源，Web服务器做一定的处理将资源以及相关信息发给客户端。<br>那么问题来了，什么是Web资源？</p>
<h3 id="Web资源与URI"><a href="#Web资源与URI" class="headerlink" title="Web资源与URI"></a>Web资源与URI</h3><p>所有能提供Web内容的东西都是Web资源，包括静态资源和动态资源。URI提供了一种统一的资源命名方式，它标记了资源的访问方式。URI分为URL和URN，一般情况下，URI指的就是URL。</p>
<blockquote>
<p>URI：Uniform Resource Identifier，统一资源标识符 &#032;<br>URL：Uniform Resource Locator，统一资源定位符 &#032;<br>URN：Uniform Resource Name，统一资源名称 &#032;</p>
</blockquote>
<p>URL拥有固定的语法格式，因方案（scheme）而异，看下面的例子：</p>
<p>HTTP：<code>http://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;?&lt;query&gt;#&lt;frag&gt;</code><br>HTTPS：<code>https://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;?&lt;query&gt;#&lt;frag&gt;</code><br>FTP：<code>ftp://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;</code><br>FILE：<code>file://&lt;host&gt;/&lt;path&gt;</code></p>
<p>关于URL格式的更详细信息可以参考rfc1738。</p>
<p>注意，方案即代表着协议，URL并不局限于HTTP协议。下面我们详细讨论一下HTTP的URL。</p>
<table> <thead> <tr><th style="width:150px" colspan="2"> 组件 </th><th style="width:250px"> 意义 </th><th style="width:100px"> 是否可选 </th></tr> </thead> <tbody> <tr><td> <code>&lt;scheme&gt;</code> </td><td> 方案 </td><td> 指明了解析URL的程序使用什么协议，方案名是大小写无关的 </td><td> 必须 </td></tr> <tr><td> <code>&lt;host&gt;</code> </td><td> 主机 </td><td> 标识了资源所在的宿主机器，也就是服务器 </td><td> 必须 </td></tr> <tr><td> <code>&lt;port&gt;</code> </td><td> 端口 </td><td> 说明了服务器正在监听的网络端口 </td><td> 有默认值 </td></tr> <tr><td> <code>&lt;path&gt;</code> </td><td> 路径 </td><td> 指明了资源所在的地方 </td><td> 可选 </td></tr> <tr><td> <code>&lt;query&gt;</code> </td><td> 查询字符串 </td><td> 额外传递给服务期的信息 </td><td> 可选 </td></tr> <tr><td> <code>&lt;frag&gt;</code> </td><td> 片段 </td><td> 表示资源内部的一个片段，仅由客户端使用，客户端不能将片段传送给服务器 </td><td> 可选 </td></tr> </tbody> </table>

<p>HTTP的URL与HTTPS的URL很像，不过HTTP的端口默认值为80，HTTPS的端口默认值为443。</p>
<p>URL分为相对URL和绝对URL。上面讨论的都是绝对URL，单独的相对URL没有任何意义。相对URL可以通过基础URL来推导成绝对URL。基础URL可能由包含相对URL的资源显式指定（HTML里的<base>标签可以指定基础URL），如果没有显式指定，则可以由包含相对URL的资源确定。相对URL推导成绝对URL的算法在rfc1808中指定，后来又合并到rfc2396中。</p>
<p>URL由ASCII中除空格外的可打印字符表示，其他的字符我们称之为受限字符或者不安全字符，这些字符在表示URL时需要转义。</p>
<blockquote>
<p>客户端应该且只应该对所有受限/不安全字符进行转义，有些恶意的客户端会对额外的字符进行转义以绕过Web过滤程序的模式匹配。</p>
<p>URL中要转义的值最好在ASCII字符范围内（0 ~ 127），包含其他字符可能会导致一些问题。总之，URL对国际化的支持还是不够友好，尽量只使用英文字符。</p>
</blockquote>
<p>URL表示了资源的位置，一旦资源被移走，URL就会失效。URN则为特定内容提供了一个稳定的名称，与位置无关。例如<code>urn:ietf:rfc:2616</code>用来表示文档rfc2616。URN当前仍处于试验阶段，它需要一个架构来解析资源的位置，目前缺乏此类架构。</p>
<p>永久统一资源定位符（PURL）可以用URL来实现与URN相同的功能，引入一个中间层对资源的实际URL登记和跟踪，当使用失效的URL访问时，该中间层重定向到实际的URL上去。</p>
<h3 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h3><p>在计算机网络中，我们一般将应用层要发送的数据称为报文。报文是来自客户端的请求数据或者是来自服务端的响应数据。HTTP报文是基于文本行的格式化数据，尽管这对计算机来说可能不够友好（影响效率又容易出错），可是这也增加了HTTP的可扩展性和可调试性（当我们拿到一条报文时不必去查找二进制与实际意义的对应关系）。这样还是有些好处的。</p>
<blockquote>
<p>HTTP规范中要求应该用<code>&lt;CR&gt;&lt;LF&gt;</code>两个字符（即<code>\r\n</code>，包含一个回车符和一个换行符）来表示文本行的结束，但并不是所有程序都遵守这个规范，稳健的程序应该接受单个换行符作为行的终止。</p>
</blockquote>
<p>HTTP报文由三个部分组成：一个对报文进行描述的起始行（start line），零个或多个说明属性的首部（header），以及可选的、包含数据的实体主体（entity-body，实体的主体部分）。</p>
<blockquote>
<p>实体（entity）由实体首部与实体主体组成，实体首部描述了与实体相关的一些属性。如不做特殊说明，下面的“实体的主体部分”、“实体主体”是等价的。</p>
</blockquote>
<p>HTTP请求报文（request message）的语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;method&gt; &lt;request-uri&gt; &lt;HTTP-version&gt;</div><div class="line">&lt;headers&gt;</div><div class="line"></div><div class="line">&lt;entity-body&gt;</div></pre></td></tr></table></figure></p>
<p>HTTP响应报文（response message）的语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;HTTP-version&gt; &lt;status-code&gt; &lt;reason-phrase&gt;</div><div class="line">&lt;headers&gt;</div><div class="line"></div><div class="line">&lt;entity-body&gt;</div></pre></td></tr></table></figure></p>
<p>先对各部分的作一下简要说明：</p>
<ul>
<li>方法 <code>&lt;method&gt;</code><br>  指明了将要以何种方式来访问由请求URI指定的资源。方法是大小写敏感的。</li>
<li>请求URI <code>&lt;request-uri&gt;</code><br>  包含资源绝对路径的URL，服务器可以假定自己是URL的主机/端口。</li>
<li>HTTP版本 <code>&lt;HTTP-version&gt;</code><br>  包含HTTP版本的主版本号和次要版本号，如HTTP/0.9，HTTP/1.1等。版本号是为了让通信双方了解彼此的能力。</li>
<li>状态码 <code>&lt;status-code&gt;</code><br>  由三位数字组成，表明了请求是否被理解或被满足，描述了请求过程中发生的情况。</li>
<li>原因短语 <code>&lt;reason-phrase&gt;</code><br>  用简短的文字来描述状态代码产生的原因。原因短语不做特殊限制，通常使用通用的描述方便交流。客户端不需要检查或显示原因短语。</li>
<li>首部 <code>&lt;headers&gt;</code><br>  可以有零个或多个首部，每个首部包含一个名字，后面跟着一个冒号（:），然后是一个可选的空格，接着是一个值，最后是一个<cr><lf>。首部描述了请求或者响应的一些属性，有些HTTP版本要求报文中必须包含某些特定的首部。</lf></cr></li>
<li>实体主体 <code>&lt;entity-body&gt;</code><br>  包含一个由任意数据组成的数据块。并不是所有的报文都包含实体主体，由请求方法与响应状态码决定。</li>
</ul>
<p>注意，起始行和首部都是纯文本的，但实体主体没有此限制。</p>
<p>下面是一个请求报文的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET /example.html HTTP/1.1</div><div class="line">Host: 127.0.0.1:8080</div><div class="line">Connection: keep-alive</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class="line">Accept-Encoding: gzip, deflate, sdch, br</div><div class="line">Accept-Language: zh-CN,zh;q=0.8</div></pre></td></tr></table></figure></p>
<p>下面是一个响应报文的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Date: Sun, 16 Apr 2017 01:40:46 GMT</div><div class="line">Server: Apache/2.4.23 (Win64) PHP/5.6.24</div><div class="line">Last-Modified: Sun, 16 Apr 2017 01:40:01 GMT</div><div class="line">ETag: &quot;8a-54d3ec0d24918&quot;</div><div class="line">Accept-Ranges: bytes</div><div class="line">Content-Length: 138</div><div class="line">Keep-Alive: timeout=5, max=100</div><div class="line">Connection: Keep-Alive</div><div class="line">Content-Type: text/html</div><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;title&gt;EXAMPLE&lt;/title&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;p&gt;Hello, This is an example page.&lt;/p&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>TIPS：借助浏览器的F12调试工具可以看到报文的具体内容哦~</p>
</blockquote>
<p>下面稍微详细介绍一下报文的各个部分：</p>
<p><strong>1. 协议版本</strong><br>HTTP的第一个版本是HTTP/0.9，协议内容非常简单：请求报文只有一个请求行且没有版本描述，响应报文只有实体主体。HTTP/0.9只支持GET方法，而且服务器只能回应HTML格式的字符串，不能回应别的格式。定义它的初衷只是为了获取简单的HTML对象。很快它就被HTTP/1.0取代了。</p>
<p>HTTP/1.0是第一个得到广泛使用的HTTP版本，它于1996年5月发布，定义于rfc1945当中。协议的内容大大增加，添加了版本号、首部、一些额外的方法以及服务器响应的状态码。HTTP/1.0引入了POST方法和HEAD方法，而且任何格式的内容都可以发送了。这使得互联网不仅可以传输文字，还能传输图像、视频、二进制文件。这为互联网的大发展奠定了基础。HTTP/1.0的新特性使得HTTP的可用性大大提高，为了满足商业需要，各个Web客户端和服务器厂商都在向HTTP中添加各种新特性，于是产生了一个HTTP的非正式扩展版本，已经成为非官方的事实标准，通常称之为HTTP/1.0+。</p>
<p>HTTP/1.1对HTTP/1.0+进行改进，主要关注的是设计中的缺陷与语义明确，引入了一些性能优化措施，并删除了一些不好的特性。HTTP/1.1最初于1997年1月发布，定义于rfc2068中，后来又在1999年6月重新修订，形成了现在广为人知的rfc2616。再后来又由多个rfc文档进行补充详细说明。</p>
<blockquote>
<p>本段信息翻译自rfc2616<br>超文本传输协议（HTTP）是一个分布式、协作、超媒体信息系统的应用层协议。在1990年WWW全球信息刚刚起步的时候HTTP就得到了应用。HTTP的第一个版本我们称之为HTTP/0.9，是一种为互联网原始数据传输服务的简单协议。由rfc1945定义的HTTP/1.0进一步完善了这个协议。它允许消息以类MIME消息的格式传送，它包括传输数据的元信息和对请求/响应语义的修饰。但是，HTTP/1.0没有充分考虑到分层代理、缓存的影响和持久连接及虚拟主机的需求。并且随着不完善的HTTP/1.0应用程序的激增，这就迫切需要一个新的版本，以便能使两个通信程序能够确定彼此的真实能力。</p>
<p>此规范定义的协议叫做“HTTP/1.1”，这个协议与HTTP/1.0相比，此规范更为严格，以确保各个协议的特征得到可靠实现。</p>
</blockquote>
<p>HTTP/2已经在2015年5月发布了草案，定义于rfc7540。这个版本删除了次要版本号，所以你看到的是HTTP/2而不是HTTP/2.0。这个版本将HTTP的语义进行了优化，比如采用了二进制描述。（这个版本的rfc文档已不再由T. Berners-Lee起草，而是由SPDY的相关人员编写）</p>
<blockquote>
<p>本段信息翻译自<a href="https://http2.github.io/faq/" target="_blank" rel="external">https://http2.github.io/faq/</a><br>Q: HTTP/2会替换HTTP/1.x吗？<br>A: 工作组的目标是HTTP/1.x的典型用途可以使用HTTP/2并看到一些好处。话虽如此，我们不能强迫世界迁移，并且由于人们部署代理和服务器的方式，HTTP/1.x很可能仍然再使用一段时间。</p>
</blockquote>
<p>现在已经有一部分客户端服务器已能支持HTTP/2（的部分特性？），但HTTP/1.1在一段时间内仍然会是主流版本。</p>
<p><strong>2. 方法</strong><br>方法除了HTTP协议预定义的一些请求方法外是可以扩展的，下表列出的方法被大多数商业服务器所实现。</p>
<table> <thead> <tr><th style="width:75px">方法</th><th style="width:200px">描述</th> <th style="width:90px">是否包含实体</th><th style="width:60px">起始版本</th></tr> <thead> <tbody> <tr><td><code>GET</code></td><td>从服务器获取一份文档</td><td>否</td><td>HTTP/0.9</td></tr> <tr><td><code>HEAD</code></td><td>向服务器获取以GET方法请求时文档的首部</td><td>否</td><td>HTTP/1.0</td></tr> <tr><td><code>POST</code></td><td>向服务器发送要处理的数据</td><td>是</td><td>HTTP/1.0</td></tr> <tr><td><code>TRACE</code></td><td>对可能经过代理服务器的报文进行跟踪</td><td>否</td><td>HTTP/1.1</td></tr> <tr><td><code>OPTIONS</code></td><td>了解服务器可以对资源执行哪些方法</td><td>否</td><td>HTTP/1.1</td></tr> </tbody> </thead></thead></table>

<p>并不是所有的服务器都实现了所有方法。如果服务器不理解客户端发送的方法，就会返回501或者405的状态码。</p>
<p>HTTP将不会在服务器上产生任何结果的方法称为安全方法（这里的产生结果是指修改数据），GET和HEAD被设计为安全方法。实际上安全方法并非真的不会产生结果，这取决于Web开发者。安全方法被设计的目的在于提示/通知用户不安全的方法可能会导致一些后果（比如点击支付按钮的可能导致账户扣款）。</p>
<p><strong>3. 状态码</strong></p>
<p>方法告诉服务器做什么事情，状态码则告诉客户端发生了什么事情。状态码由三位数字组成，根据第一位数字分成五大类：</p>
<ul>
<li>1xx：信息型状态码</li>
<li>2xx：成功状态码</li>
<li>3xx：重定向状态码</li>
<li>4xx：客户端错误状态码</li>
<li>5xx：服务端错误状态码</li>
</ul>
<p>原因短语通常和状态码一起使用，但原因短语是给人看的，比如，对客户端或服务器来说，它对<code>200 OK</code>和<code>200 Done</code>的处理方式完全一样。尽管如此，大多数服务器还是会返回HTTP协议推荐的原因短语。</p>
<p>下表列出了一些常见的错误码：</p>
<table> <thead> <tr><th style="width:50px">状态码</th><th style="width:150px">原因短语</th> <th style="width:250px">含义</th></tr> <thead> <tbody> <tr><td>200</td><td>OK</td><td>成功请求，实体包含所请求的资源</td></tr> <tr><td>304</td><td>Not Modified</td><td>客户端发起条件GET请求，同时所请求资源未修改就返回这个状态码，表明可以使用缓存。返回这个状态码时不应该包含实体主体</td></tr> <tr><td>400</td><td>Bad Request</td><td>告知客户端发了一个错误的请求</td></tr> <tr><td>403</td><td>Forbidden</td><td>服务器拒绝请求，返回实体可能说明拒绝原因，但这个状态码通常是在服务器不想说明拒绝原因的时候使用的</td></tr> <tr><td>404</td><td>Not Found</td><td>请求资源不存在</td></tr> <tr><td>414</td><td>Request URI Too Large</td><td>请求的URI太长，超过服务器能处理的范围</td></tr> <tr><td>500</td><td>Internal Server Error</td><td>服务器遇到了一个妨碍完成请求的错误</td></tr> <tr><td>502</td><td>Bad Gateway</td><td>作为代理或网关的服务器收到了错误响应时使用此状态码<sub>**</sub></td></tr> </tbody> </thead></thead></table>

<p>** 经验告诉我们，从一个运行良好的站点收到此状态码表明这个站点连接数过多超出了后端服务器处理的能力，也就是网站所支持的并发连接数不够。</p>
<p>当客户端收到了它不理解的状态码时会根据这个状态码所在的大类来确定如何处理响应。</p>
<p><strong>4. 首部</strong></p>
<p>首部和方法、响应码配合工作，来决定客户端和服务器能做什么事情。首部可以分为五个主要类型。</p>
<ul>
<li>通用首部：客户端和服务器都可以使用的首部。</li>
<li>请求首部：请求报文特有的首部</li>
<li>响应首部：响应报文特有的首部</li>
<li>实体首部：对应于实体的主体部分的首部</li>
<li>扩展首部：由应用程序开发者创建的非标准首部</li>
</ul>
<p>下面举几个例子：</p>
<table> <thead> <tr><th style="width:75px">类别</th><th style="width:150px">首部</th> <th style="width:250px">含义</th></tr> <thead> <tbody> <tr><td rowspan="2">通用首部</td><td><code>Date</code></td><td>提供日期和时间，说明报文的创建时间</td></tr> <tr><td><code>Cache-Control</code></td><td>用于控制缓存</td></tr> <tr><td rowspan="2">请求首部</td><td><code>Host</code></td><td>说明所请求的服务器主机</td></tr> <tr><td><code>If-Modified-Since</code></td><td>只有在指定日期后资源被修改过才完成这个请求，否则返回304</td></tr> <tr><td>响应首部</td><td><code>Server</code></td><td>服务器应用程序软件的名称和版本</td></tr> <tr><td rowspan="3">实体首部</td><td><code>Content-Length</code></td><td>说明实体主体的长度</td></tr> <tr><td><code>Content-Type</code></td><td>说明实体的MIME类型</td></tr> <tr><td><code>Last-Modified</code></td><td>说明实体的最后一次修改日期和时间</td></tr> </tbody> </thead></thead></table>

<p><span class="emoji"><img src="https://raw.githubusercontent.com/kiwi-yan/blog-file-library/master/_static/image/emoji/exclamation.png"></span><span class="emoji"><img src="https://raw.githubusercontent.com/kiwi-yan/blog-file-library/master/_static/image/emoji/exclamation.png"></span><span class="emoji"><img src="https://raw.githubusercontent.com/kiwi-yan/blog-file-library/master/_static/image/emoji/exclamation.png"></span></p>
<blockquote>
<p>理解HTTP协议的关键在于对HTTP在不同场景所产生报文的理解，也就是理解不同的状态码、首部具体应用场景。后面几篇文章将会介绍一些重点的模块，想要了解更多可以继续关注我的博客<span class="emoji"><img src="https://raw.githubusercontent.com/kiwi-yan/blog-file-library/master/_static/image/emoji/full_moon_with_face.png"></span>，参考资料中给出了更为完整更为权威的文档，也可以读一下。</p>
<p>HTTP的复杂性主要在于通信的客户端或服务器所支持的HTTP协议可能不同，或者没有正确实现协议要求的某些内容。</p>
</blockquote>
<p>到现在为止我们已经知道HTTP报文的基本组成，但是HTTP协议在网络中是如何工作的呢？</p>
<h3 id="HTTP事务"><a href="#HTTP事务" class="headerlink" title="HTTP事务"></a>HTTP事务</h3><p>HTTP协议是应用层的通信协议，它依赖传输层的TCP协议来完成报文的发送与接收。TCP协议是面向字节流的可靠的传输层协议，它可以保证数据无误的从发送端到达接收端，因此我们在使用HTTP协议的时候，无需考虑报文是否被正确传输，这些事情TCP都帮我们做了。</p>
<p>HTTPS协议是基于SSL/TLS的HTTP协议。抽象的看，HTTPS主要是在TCP和HTTP之间加了一层“安全层”（确切来说应该是OSI中的表示层和会话层）利用SSL/TLS来对数据进行加密解密。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">                                    +------------------+</div><div class="line">                                    |       HTTP       | 应用层</div><div class="line">+------------------+                |------------------|</div><div class="line">|       HTTP       | 应用层         |    SSL or TLS    | “安全层”</div><div class="line">|------------------|                |------------------|           </div><div class="line">|        TCP       | 传输层         |        TCP       | 传输层    </div><div class="line">|------------------|                |------------------|           </div><div class="line">|        IP        | 网络层         |        IP        | 网络层    </div><div class="line">|------------------|                |------------------|           </div><div class="line">|     网络接口     | 数据链路层     |     网络接口     | 数据链路层</div><div class="line">+------------------+                +------------------+</div><div class="line">    HTTP协议栈                           HTTPS协议栈</div></pre></td></tr></table></figure>
<p>HTTP在传输数据前，先建立TCP连接，连接建立好后就在客户端和服务器间形成了一条虚拟电路，HTTP报文可以沿着这条虚拟电路到达指定位置，报文发送完毕可以根据具体情况决定是否需要关闭连接。</p>
<p>关于TCP的信息这里不做过多阐述，我们重点关注HTTP的工作过程。</p>
<p>我们将一条客户端发送到服务器的请求报文与服务器返回给客户端的响应报文合起来称为一个HTTP事务。<br>最初一个TCP连接仅处理一个HTTP事务。后来为了优化性能提出了持久连接的概念。尽管如此，我们仍需知道HTTP协议是无状态的，也就是说在多个HTTP事务中，每个事务都是独立的，无论TCP连接是持久的还是完成一个事务就断开，HTTP都不会记录此事务的连接状态（对比FTP，FTP在进行用户认证后会一直保持和这个用户的会话，直至关闭连接，但HTTP不会）。</p>
<p>一个HTTP事务的处理过程举例：</p>
<ol>
<li>客户端从URL中解析出服务器的主机名</li>
<li>客户端将服务器主机名转化为IP地址</li>
<li>客户端从URL中解析出端口号（如果有）</li>
<li>客户端建立与服务器的TCP连接</li>
<li>客户端向服务器发送一条HTTP请求报文</li>
<li>服务器处理客户端发送的请求，生成响应报文发回客户端</li>
<li>客户端收到响应报文，关闭连接</li>
</ol>
<h3 id="Web结构组件"><a href="#Web结构组件" class="headerlink" title="Web结构组件"></a>Web结构组件</h3><p>在这篇文章中，我不停提到服务器和客户端，那么到底什么是服务器和客户端，HTTP的服务器和客户端到底都有哪些呢？<br>首先得声明，服务器和客户端既可以指软件应用程序，也可以指运行对应软件的硬件设备，可以根据语境区分出具体含义。下面的解释主要针对软件的概念来描述。</p>
<ol>
<li>服务器（server）<br>Web服务器是Web资源的拥有者，它可以处理来自Web客户端的请求。这是一个被动的过程，Web服务器不会主动向Web客户端发送报文。Web服务器因为使用HTTP作为通信协议，所以也称为HTTP服务器。常见的Web服务器有Nginx、Apache httpd、Apache tomcat、Lighttpd，Microsoft IIS等等。HTTP响应报文中的Server首部表明了服务器的名称和版本。</li>
</ol>
<blockquote>
<p>值得一提的是上面说到的Apache tomcat和Microsoft IIS，它们是一种应用服务器，也可以提供与HTTP服务器相同的功能。不过因为它们主要处理动态内容，所以处理静态页面的性能远远不如Nginx、httpd等专注处理静态页面的HTTP服务器。在实际应用中，通常会将其作为Nginx/httpd的后端服务器来专门处理动态内容。</p>
</blockquote>
<ol>
<li>客户端（client）<br>Web客户端可以发送HTTP请求报文的程序，通常还会解析收到的HTTP响应报文。最常见的Web客户端就是各种浏览器。除了浏览器还有一类自动发送HTTP请求的程序，我们将其称为Web机器人（也叫爬虫，网络蜘蛛）。某些客户端程序如Telnet也可以当作Web客户端来使用。</li>
</ol>
<p>可以代替用户生成请求报文的客户端，我们称之为用户代理（user agent），Web客户端主要以用户代理为主，很少有人会主动自己编写请求报文发送给服务器。用户代理在发送请求的时候通常会带上User-Agent首部来说明其信息。至于上面我举例的请求报文中为什么既有Mozilla又有AppleWebKit又有Safari，我表示也是亿脸蒙蔽<span class="emoji"><img src="https://raw.githubusercontent.com/kiwi-yan/blog-file-library/master/_static/image/emoji/new_moon_with_face.png"></span><span class="emoji"><img src="https://raw.githubusercontent.com/kiwi-yan/blog-file-library/master/_static/image/emoji/full_moon_with_face.png"></span>，实际上我使用的浏览器是Chrome。</p>
<p>除了服务器与客户端，还有一些其他Web组件。</p>
<ol>
<li>代理（proxy）<br>代理是位于服务器与客户端之间的HTTP中间实体，可以负责转发流量、内容过滤、性能优化等功能。也称为代理服务器。想了解代理的更多细节请继续关注我的博客<span class="emoji"><img src="https://raw.githubusercontent.com/kiwi-yan/blog-file-library/master/_static/image/emoji/full_moon_with_face.png"></span>。</li>
</ol>
<blockquote>
<p>关于Agent与Proxy<br>两者翻译成中文都是代理，这很容易引起困惑。可以这么理解：Agent是客户端，Proxy既是服务器又是客户端（即使说成是代理服务器仍不能掩饰它充当客户端角色的本质）</p>
</blockquote>
<ol>
<li><p>缓存（cache）<br>缓存是一种特殊的代理服务器，它可以将经过代理的Web响应复制保存起来，以便下次更快地提供服务。正确部署和使用缓存可以很大的提高效率。缓存也叫Web缓存或者代理缓存。</p>
</li>
<li><p>网关（gateway）<br>网关分为协议网关和资源网关。<br>协议网关相当于一个协议转换程序，比如用户发送了一个获取文件请求，服务器可能通过HTTP/FTP网关从FTP服务器上将文件获取到发送给客户端。<br>资源网关则指应用程序获取另一个程序提供的数据，我们称之为网关API。第一个流行的网关API是CGI，由于性能的问题，人们又开发出了fastcgi。（关于CGI相关理论的学习还在我的计划列表中，暂时没法提供更多信息）</p>
</li>
<li><p>隧道（tunnel）<br>Web隧道可以通过HTTP连接来发送非HTTP的流量。至于具体实现方式我还没有理解清楚。。</p>
</li>
</ol>
<h3 id="More…"><a href="#More…" class="headerlink" title="More…"></a>More…</h3><p>[1] rfc1945（HTTP/1.0）：<a href="https://www.ietf.org/rfc/rfc1945.txt" target="_blank" rel="external">https://www.ietf.org/rfc/rfc1945.txt</a><br>[2] rfc2616（HTTP/1.1）：<a href="https://www.ietf.org/rfc/rfc2616.txt" target="_blank" rel="external">https://www.ietf.org/rfc/rfc2616.txt</a><br>[3] rfc7540（HTTP/2）：<a href="https://www.ietf.org/rfc/rfc7540.txt" target="_blank" rel="external">https://www.ietf.org/rfc/rfc7540.txt</a><br>[4] 关于HTTP/2的一些常见问题：<a href="https://http2.github.io/faq/" target="_blank" rel="external">https://http2.github.io/faq/</a><br>[5] Nginx官网：<a href="http://nginx.org/" target="_blank" rel="external">http://nginx.org/</a></p>
<p>Next. 《HTTP权威指南》学习总结2——代理和缓存</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;本来是计划要翻译HTTP相关rfc文档的，奈何工程量巨大，进度实在太慢，只能放弃，以后有兴趣可以搞一下，因为里面确实有一些很有用的东西，当前学习任务还是将就效率的。终于在一些因素的影响下，我决定在1个月内看完《HTTP权威指南》这本书。从3月13日开始到4月15日，进度还是拖下了，因为游戏太好玩了&lt;span class=&quot;emoji&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/kiwi-yan/blog-file-library/master/_static/image/emoji/grinning.png&quot;/&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;不说废话，进入正题。&lt;/p&gt;
&lt;p&gt;如今我们已进入Web x.0的时代（求x = ?），HTTP协议是Web系统的最基本协议，但是很多开发者都很少系统了解过，殊不知了解HTTP协议可以解决很多开发过程中的疑难杂症。因为自己在两年前学习网络编程的时候想着做个什么东西出来，当时就选了一个HTTP服务器，从此与HTTP结下了不解之缘，工作以后到目前为止主要工作内容就是Web开发，于是又勾起了那段青涩的回忆，也开始想深入了解一下她，于是乎……（对不起我编不下去了），总之，我写下了这几篇博客来作为自己对最近一段时间学习的总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web开发，网络编程" scheme="http://kiwi-yan.github.io/tags/web%E5%BC%80%E5%8F%91%EF%BC%8C%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>2017计划</title>
    <link href="http://kiwi-yan.github.io/2017/02/03/plans-in-2017/"/>
    <id>http://kiwi-yan.github.io/2017/02/03/plans-in-2017/</id>
    <published>2017-02-03T11:20:28.000Z</published>
    <updated>2017-04-16T05:27:56.009Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>话说自己每年都会制订一个计划，结果往往是以失败告终，从来都没有完成过。今年依然照旧制订计划，显然有些晚了，以往都是在年前（无论阴历还是阳历），而现在已经年后了。所幸的是，年后的工作还没有开始，所以还是来的及的。</p>
<h3 id="计划方法论"><a href="#计划方法论" class="headerlink" title="计划方法论"></a>计划方法论</h3><p>工作了之后，导师经常提起的一个词语就是“方法论”。方法论说的通俗一点就是套路。总结经验教训，结合道听途说，形成自己做事情的套路，那么方法论就形成了。<br>仔细想想以前制订的计划，对比完成情况，要么是计划假、大、空，要么就是自己半途而废。工作当中也经常会涉及到进度安排，刚开始的时候也是按自己的想法想当然的安排，经常导致不能按时间完成，工作了半年以后，进度拖的时间没有刚开始的时候那么长了。所以这方面也是吃了很多亏，当然也收获了一点经验，不过已经足够了。</p>
<a id="more"></a>
<p>关于制订计划，在管理学中有一项原则叫做SMART。SMART就是Specific/Measurable/Attainable/Relevant/Time-based。这是前人总结出来的经验并加以验证过的，所以制订计划时这五项要谨记。</p>
<blockquote>
<p>Specific: 具体的 &#032;<br>Measurable: 可度量的 &#032;<br>Attainable: 可实现的 &#032;<br>Relevant: 相关的 &#032;<br>Time-based: 有时限的 &#032;</p>
</blockquote>
<p>关于SMART在实践中的应用，我按自己的理解总结如下：<br>在一定的时间段内，制订一个（或几个）明确的目标，细化到具体的可以量化的小点，这些小点各自独立，或者有序关联（依赖关系没有环），各个击破就可以完成大的目标。同时考虑自身能力与其他环境情况适当留出一些buffer，以应对非计划内的情况。</p>
<h3 id="2017年计划"><a href="#2017年计划" class="headerlink" title="2017年计划"></a>2017年计划</h3><p>计划之前得先明确目标，既然是在技术博客上写的文章，这里主要写一些自己的技术成长方面：</p>
<ol>
<li>工作了半年，主要任务是Web开发，遇到过很多问题未曾深究，加上自己在学校时写过简单的Web服务器，对这方面的知识知道一点，但都是囫囵吞枣，现在想着有必要深究一下，所以想阅读一下HTTP协议的一些标准文档。</li>
<li>职位是后台开发，但是自己好久没有做过相关的开发，加上之前学的稀里糊涂，所以得系统学习一遍，结合现在的一些想法应该会有一些新的理解。</li>
<li>计算机基本功是个需要长期学习的东西，不紧急但是很重要，目标是看完《CSAPP》。</li>
<li>“内功心法”相关：看完《精进》，最好能够有些感悟。</li>
</ol>
<p>目标就是这样，具体实现方式：</p>
<ol>
<li>阅读HTTP协议相关的RFC文档，主要是HTTP/1.1相关的文档，原文是英文的，可以翻译出来，一边学习计算机，一边学习英语，一举两得（手动滑稽）。发表成博客，以供参考。</li>
<li>后台开发方面，复习/学习《APUE》；重新学习《UNP》。遇到问题深入探究，值得玩味的发表成博客。</li>
<li>看完《CSAPP》《精进》。</li>
</ol>
<p>假设这一年有2/3的日子可以看书，每天看10页书（休息日可以看更多，可以防止数字估算过大），那么一年就可以看<code>365*2/3*10 = 2433</code>页书，嗯，还挺多的。时间buffer有了，希望自己可以完成。</p>
<p>既然自己花时间做了这个博客，好久了也没写过几篇，一定要利用起来，所以上面特地提到写博客这个方式。</p>
<p>下面是计划的具体内容：</p>
<ol>
<li>每月至少完成一篇技术博客。</li>
<li>每季度至少翻译一篇RFC文档。</li>
</ol>
<p>ok，明天上班，计划也可以开始执行了。</p>
<p>另：我的博客地址就是<a href="https://kiwi-yan.github.io/">https://kiwi-yan.github.io/</a>，无耻的求收藏，求监督，顺便求一个未完成的惩罚方式。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;话说自己每年都会制订一个计划，结果往往是以失败告终，从来都没有完成过。今年依然照旧制订计划，显然有些晚了，以往都是在年前（无论阴历还是阳历），而现在已经年后了。所幸的是，年后的工作还没有开始，所以还是来的及的。&lt;/p&gt;
&lt;h3 id=&quot;计划方法论&quot;&gt;&lt;a href=&quot;#计划方法论&quot; class=&quot;headerlink&quot; title=&quot;计划方法论&quot;&gt;&lt;/a&gt;计划方法论&lt;/h3&gt;&lt;p&gt;工作了之后，导师经常提起的一个词语就是“方法论”。方法论说的通俗一点就是套路。总结经验教训，结合道听途说，形成自己做事情的套路，那么方法论就形成了。&lt;br&gt;仔细想想以前制订的计划，对比完成情况，要么是计划假、大、空，要么就是自己半途而废。工作当中也经常会涉及到进度安排，刚开始的时候也是按自己的想法想当然的安排，经常导致不能按时间完成，工作了半年以后，进度拖的时间没有刚开始的时候那么长了。所以这方面也是吃了很多亏，当然也收获了一点经验，不过已经足够了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://kiwi-yan.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="方法论" scheme="http://kiwi-yan.github.io/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>使用Python处理Excel文件</title>
    <link href="http://kiwi-yan.github.io/2016/08/14/python-excel/"/>
    <id>http://kiwi-yan.github.io/2016/08/14/python-excel/</id>
    <published>2016-08-14T13:35:15.000Z</published>
    <updated>2017-04-16T05:30:09.410Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>最近在做一些数据处理和计算的工作，因为数据是以.csv格式保存的，因此刚开始直接用Excel来处理。但是做着做着发现重复的劳动其实并没有多大的意义，于是就想着写个小工具帮着处理。以前正好在一本书上看到过使用Python来处理Excel表格，可惜没有仔细看。于是我到处查找资料，终于算是完成了任务，因此撰写此文就算是总结吧。</p>
<p>在这里我还会顺带介绍一下如何处理.csv文件，因为某些情况下这是必须的（后面会提到）。</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>下面的环境配置是针对Windows操作系统的，其他操作系统差别不是很大，可以参考一下。</p>
<p>我使用的Python版本号是2.7.12，如果你的Python是2.x，请确保在2.6以上。在Python 3.x上可能会有些不太一样，所以要注意，可以参考其他的文档和博客。</p>
<a id="more"></a>
<p>Python自带的<code>csv</code>模块可以处理.csv文件。</p>
<p><code>xlrd</code>和<code>xlwt</code>两个模块分别用来读Excel和写Excel，只支持.xls和.xlsx格式，Python不默认包含。这两个模块之间相互独立，没有依赖关系，也就是说可以根据需要只安装其中一个。</p>
<p><code>xlutils</code>模块可以同时读写一个已存在的Excel文件，依赖于<code>xlrd</code>和<code>xlwt</code>。</p>
<p>安装这三个模块时，可以去<a href="https://pypi.python.org/pypi" target="_blank" rel="external">PyPI</a>去搜索需要的模块并下载。在我写这篇文章时，<code>xlrd</code>是有一个适合python 3.x的.whl文件和一个通用的.tar.gz的源码文件。<code>xlwt</code>是提供了同时适用于python 2.x和3.x的.whl文件和一个通用的.tar.gz的源码文件，还提供了pip的安装方式。<code>xlutils</code>与<code>xlwt</code>情况相同。</p>
<blockquote>
<p>安装过程中我是默认你已经配好了环境变量，并且pip是可用的，如果在命令行里执行pip命令显示找不到命令，可以在网上搜索相关解决方案，这里不做赘述。</p>
</blockquote>
<p>下面简单说一下几种安装模块的方式。</p>
<p>安装源码文件需要先解压，然后进入到源码目录执行下面命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py install</div></pre></td></tr></table></figure></p>
<p>安装.whl文件执行下面命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install &lt;你的.whl文件&gt;</div></pre></td></tr></table></figure></p>
<p>使用pip安装前要确认你的网络是可用的，然后执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install &lt;模块名&gt;</div></pre></td></tr></table></figure></p>
<p>当你看到类似Successfully的字样时，表明已经安装成功了。如果没成功，那就一定是有什么原因了，可以自己上网搜索具体解决方案。</p>
<h3 id="使用xlrd读Excel"><a href="#使用xlrd读Excel" class="headerlink" title="使用xlrd读Excel"></a>使用<code>xlrd</code>读Excel</h3><p><code>xlrd</code>提供的接口比较多，常用的如下：</p>
<p><code>open_workbook()</code>打开指定的Excel文件，返回一个Book对象。</p>
<p>通过Book对象可以得到各个Sheet对象（一个Excel文件可以有多个Sheet，每个Sheet就是一张表格）。</p>
<p><code>Book.nsheets</code>返回Sheet的数目。</p>
<p><code>Book.sheets()</code>返回所有Sheet对象的list。</p>
<p><code>Book.sheet_by_index(index)</code>返回指定索引处的Sheet。相当于<code>Book.sheets()[index]</code>。</p>
<p><code>Book.sheet_names()</code>返回所有Sheet对象名字的list。</p>
<p><code>Book.sheet_by_name(name)</code>根据指定Sheet对象名字返回Sheet。</p>
<p>通过Sheet对象可以获取各个单元格，每个单元格是一个Cell对象。</p>
<p><code>Sheet.name</code>返回表格的名称。</p>
<p><code>Sheet.nrows</code>返回表格的行数。</p>
<p><code>Sheet.ncols</code>返回表格的列数。</p>
<p><code>Sheet.row(r)</code>获取指定行，返回Cell对象的list。</p>
<p><code>Sheet.row_values(r)</code>获取指定行的值，返回list。</p>
<p><code>Sheet.col(c)</code>获取指定列，返回Cell对象的list。</p>
<p><code>Sheet.col_values(c)</code>获取指定列的值，返回list。</p>
<p><code>Sheet.cell(r, c)</code>根据位置获取Cell对象。</p>
<p><code>Sheet.cell_value(r, c)</code>根据位置获取Cell对象的值。</p>
<p><code>Cell.value</code>返回单元格的值。</p>
<p>下面是一段示例代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"></div><div class="line">wb = xlrd.workbook(<span class="string">'test.xls'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 打印每张表的最后一列</span></div><div class="line"><span class="comment"># 方法1</span></div><div class="line"><span class="keyword">for</span> s <span class="keyword">in</span> wb.sheets():</div><div class="line">    <span class="keyword">print</span> <span class="string">"== The last column of sheet '%s' =="</span> % (s.name)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(s.nrows):</div><div class="line">        <span class="keyword">print</span> s.row(i)[<span class="number">-1</span>].value</div><div class="line"></div><div class="line"><span class="comment"># 方法2</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(wb.nsheets):</div><div class="line">    s = wb.sheet_by_index(i)</div><div class="line">    <span class="keyword">print</span> <span class="string">"== The last column of sheet '%s' =="</span> % (s.name)</div><div class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> s.col_values(s.ncols - <span class="number">1</span>):</div><div class="line">        <span class="keyword">print</span> v</div><div class="line"></div><div class="line"><span class="comment"># 方法3</span></div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> wb.sheet_names():</div><div class="line">    <span class="keyword">print</span> <span class="string">"== The last column of sheet '%s' =="</span> % (name)</div><div class="line">    s = wb.sheet_by_name(name)</div><div class="line">    c = s.ncols - <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> range(s.nrows):</div><div class="line">        <span class="keyword">print</span> s.cell_value(r, c)</div></pre></td></tr></table></figure></p>
<h3 id="使用xlwt写Excel"><a href="#使用xlwt写Excel" class="headerlink" title="使用xlwt写Excel"></a>使用<code>xlwt</code>写Excel</h3><p>相对来说，<code>xlwt</code>提供的接口就没有<code>xlrd</code>那么多了，主要如下：</p>
<p><code>Workbook()</code>是构造函数，返回一个工作簿的对象。</p>
<p><code>Workbook.add_sheet(name)</code>添加了一个名为name的表，类型为Worksheet。</p>
<p><code>Workbook.get_sheet(index)</code>可以根据索引返回Worksheet（前提是已经添加到Workbook中了）。</p>
<p><code>Worksheet.write(r, c, vlaue)</code>是将vlaue填充到指定位置。</p>
<p><code>Worksheet.row(n)</code>返回指定的行。</p>
<p><code>Row.write(c, value)</code>在某一行的指定列写入value。</p>
<p><code>Worksheet.col(n)</code>返回指定的列。</p>
<p>通过对<code>Row.height</code>或<code>Column.width</code>赋值可以改变行或列默认的高度或宽度。（单位：0.05 pt，即1/20 pt）</p>
<p><code>Workbook.save(filename)</code>保存文件。</p>
<p>有这么几点需要注意一下：</p>
<ul>
<li><p><code>xlwt</code>模块最大能写65535行，256列，如果超过这个范围，程序运行就会出现错误，那么可能需要找一些其他方法来解决。如果我们只注重数据的处理，那么可以采用<code>csv</code>模块来替代。</p>
</li>
<li><p>文件默认的编码方式是<code>ascii</code>，如果要改变编码方式，指定<code>Workbook()</code>的<code>encoding</code>参数，如<br><code>Workbook(encoding=&#39;utf-8&#39;)</code>。</p>
</li>
<li><p>表的单元格默认是不可重复写的，如果有需要，在调用<code>add_sheet()</code>的时候指定参数<code>cell_overwrite_ok=True</code>即可。</p>
</li>
</ul>
<p>下面是一段示例代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> xlwt</div><div class="line"></div><div class="line">book = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>)</div><div class="line">sheet = book.add_sheet(<span class="string">'sheet_test'</span>, cell_overwrite_ok=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">sheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">'Python'</span>)</div><div class="line">sheet.row(<span class="number">0</span>).write(<span class="number">1</span>, <span class="string">'is'</span>)</div><div class="line">sheet.write(<span class="number">0</span>, <span class="number">2</span>, <span class="string">'very very useful.'</span>)</div><div class="line">sheet.col(<span class="number">2</span>).width = <span class="number">4000</span></div><div class="line"></div><div class="line">book.save(<span class="string">'test.xls'</span>)</div></pre></td></tr></table></figure></p>
<p>除了基本的写入数据之外，<code>xlwt</code>还可以改变单元格格式。上面的<code>write</code>方法允许接受一个<code>XFStyle</code>（意为e<strong>X</strong>cel <strong>F</strong>ile <strong>Style</strong>）类型的参数，放在最后的位置。<code>easyxf()</code>可以快速生成一个XFStyle对象。</p>
<p>这里简单介绍一下其用法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime, xlwt</div><div class="line"></div><div class="line"><span class="comment"># ... some code</span></div><div class="line"></div><div class="line">font = xlwt.Font()</div><div class="line">font.name = <span class="string">'Arial'</span></div><div class="line">font.height = <span class="number">240</span> <span class="comment"># font size: 12pt</span></div><div class="line"></div><div class="line">pattern = xlwt.Pattern()</div><div class="line">pattern.pattern = xlwt.Pattern.SOLID_PATTERN</div><div class="line">pattern.pattern_fore_colour = <span class="number">0x0A</span></div><div class="line"></div><div class="line">style = xlwt.XFStyle()</div><div class="line">style.num_format_str = <span class="string">'0.00%'</span></div><div class="line">style.font = font</div><div class="line">style.pattern = pattern</div><div class="line"></div><div class="line">a = <span class="number">8</span></div><div class="line">b = <span class="number">10</span></div><div class="line"><span class="comment"># 以百分比的形式显示，保留两位小数</span></div><div class="line">sheet.write(<span class="number">0</span>,<span class="number">3</span>, float(a) / b, style)</div><div class="line"></div><div class="line"><span class="comment"># 显示日期</span></div><div class="line">sheet.row(<span class="number">0</span>).write(<span class="number">4</span>, datetime.date(<span class="number">2016</span>,<span class="number">8</span>,<span class="number">14</span>), xlwt.easyxf(</div><div class="line">        <span class="string">'font: name Arial, height 240;'</span></div><div class="line">        <span class="string">'pattern: pattern squares, fore_color red;'</span>,</div><div class="line">        num_format_str = <span class="string">'YYYY-MM-DD'</span></div><div class="line">    )</div><div class="line">)</div></pre></td></tr></table></figure></p>
<h3 id="使用xlutils修改Excel"><a href="#使用xlutils修改Excel" class="headerlink" title="使用xlutils修改Excel"></a>使用<code>xlutils</code>修改Excel</h3><p>通过<code>xlrd.open_workbook()</code>打开的Book对象是只读的，不能直接对其进行修改操作，而<code>xlwt.Workbook()</code>返回的Workbook对象虽然可写，但是写的时候只能从零写起，那如果要修改一个已经存在的Excel该怎么办呢？</p>
<p>庆幸的是，在<code>xlutils.copy</code>中有个<code>copy()</code>方法，我们可以将一个<code>xlrd.Book</code>对象转化为一个<code>xlwt.Workbook</code>对象，这样我们就可以直接对已存在的Excel文件进行修改了。</p>
<p>用法举例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"><span class="keyword">import</span> xlutils.copy</div><div class="line"></div><div class="line">book = xlrd.open_workbook(<span class="string">'test.xls'</span>, formatting_info=<span class="keyword">True</span>)</div><div class="line">wtbook = xlutils.copy.copy(book)</div><div class="line">wtsheet = wtbook.get_sheet(<span class="number">0</span>)</div><div class="line">wtsheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">'Ok, changed!'</span>)</div><div class="line">wtbook.save(<span class="string">'test.xls'</span>)</div></pre></td></tr></table></figure></p>
<p>要注意的是：</p>
<ul>
<li><p>调用<code>xlrd.open_workbook()</code>时，如果不指定<code>formatting_info=True</code>，那么修改后整个文档的样式会丢失。对一个单元格进行<code>write</code>操作时，如果不指定样式，也会将原来的样式丢失。</p>
</li>
<li><p>注意调用<code>copy()</code>的方法。也可以通过声明<code>from xlutils.copy import copy</code>来直接调用<code>copy()</code>。</p>
</li>
</ul>
<h3 id="使用csv读写csv文件"><a href="#使用csv读写csv文件" class="headerlink" title="使用csv读写csv文件"></a>使用<code>csv</code>读写csv文件</h3><p>与读写Excel文件相比，csv文件的读写是相当方便的。<br>直接看下面的例子吧。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> csv</div><div class="line"></div><div class="line">file1 = open(<span class="string">'test1.csv'</span>, <span class="string">'rb'</span>)</div><div class="line">reader = csv.reader(file1)</div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> reader:</div><div class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> line:</div><div class="line">        <span class="keyword">print</span> col,</div><div class="line">    <span class="keyword">print</span></div><div class="line"></div><div class="line">file1.close()</div><div class="line"></div><div class="line">file2 = file(<span class="string">'test2.csv'</span>, <span class="string">'wb'</span>)</div><div class="line">writer = csv.writer(file2)</div><div class="line"></div><div class="line">writer.writerow([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</div><div class="line">writer.writerows([</div><div class="line">    [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],</div><div class="line">    [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>],</div><div class="line">    [<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>]</div><div class="line">])</div><div class="line">file2.close()</div></pre></td></tr></table></figure></p>
<p>这个程序涉及到了下面的方法：</p>
<ul>
<li><code>csv.reader()</code>返回一个DictReader对象。</li>
<li><code>csv.writer()</code>返回一个DictWriter对象。</li>
<li><code>DictWriter.writerow()</code>写一行。</li>
<li><code>DictWriter.writerows()</code>写多行。</li>
</ul>
<p>需要注意的问题是：当我们需要写csv的时候，打开文件一定要带上’b’，否则可能会往文件里输出空行。Python 3.x情况会有些不同。</p>
<h3 id="More…"><a href="#More…" class="headerlink" title="More…"></a>More…</h3><p>[1] <a href="https://github.com/python-excel/xlrd/" target="_blank" rel="external">https://github.com/python-excel/xlrd/</a><br>[2] <a href="https://github.com/python-excel/xlwt/" target="_blank" rel="external">https://github.com/python-excel/xlwt/</a><br>[3] <a href="https://github.com/python-excel/tutorial/" target="_blank" rel="external">https://github.com/python-excel/tutorial/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;最近在做一些数据处理和计算的工作，因为数据是以.csv格式保存的，因此刚开始直接用Excel来处理。但是做着做着发现重复的劳动其实并没有多大的意义，于是就想着写个小工具帮着处理。以前正好在一本书上看到过使用Python来处理Excel表格，可惜没有仔细看。于是我到处查找资料，终于算是完成了任务，因此撰写此文就算是总结吧。&lt;/p&gt;
&lt;p&gt;在这里我还会顺带介绍一下如何处理.csv文件，因为某些情况下这是必须的（后面会提到）。&lt;/p&gt;
&lt;h3 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h3&gt;&lt;p&gt;下面的环境配置是针对Windows操作系统的，其他操作系统差别不是很大，可以参考一下。&lt;/p&gt;
&lt;p&gt;我使用的Python版本号是2.7.12，如果你的Python是2.x，请确保在2.6以上。在Python 3.x上可能会有些不太一样，所以要注意，可以参考其他的文档和博客。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://kiwi-yan.github.io/tags/Python/"/>
    
      <category term="Excel" scheme="http://kiwi-yan.github.io/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>一个小小的Bug引发的思考</title>
    <link href="http://kiwi-yan.github.io/2016/08/08/bug-thoughts/"/>
    <id>http://kiwi-yan.github.io/2016/08/08/bug-thoughts/</id>
    <published>2016-08-08T11:20:28.000Z</published>
    <updated>2017-04-16T05:28:21.156Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>前段时间在搞一个网页页面，由于一些不可描述的原因，这部分无法完全套用现有框架，大部分代码只能用原生的php来开发。开发过程中遇到了一个比较蛋疼的问题。所幸终于解决，现在为了描述清楚，将问题简化抽象，将解决思路整理下来，让以后长点记性。</p>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>问题是这样的：</p>
<p>页面有一个form表单。主要用来执行一些查询功能。查询的结果是一个集合，要通过表格显示出来。当这个集合很大的时候，就要分页显示。</p>
<p>代码大致如下：</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"xxx"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">placeholder</span>=<span class="string">"请输入要查找的类型"</span>/&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"查找"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"xxx?page=1"</span>&gt;</span>1 <span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"xxx?page=2"</span>&gt;</span>2 <span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span>...<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p>问题来了。表单点提交之后显示的查询结果是正确的，但是：当点了页码之后，显示出来的结果类型不正确了，和查找时输入的类型无关了。同时表单中的值也全部重置了。</p>
<p>（可能有经验的同学已经知道是什么原因了，但是作为一个没有经验的新手，我还是一脸懵逼的状态）</p>
<h3 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h3><p>这个问题怎么解决？</p>
<p>先规定好bug场景吧: 点击“查找”内容正确，但是点击页码3的时候，表格内容不正确了。</p>
<p>1. 服务端代码定位：</p>
<p>先打印一下服务端的获取的参数吧，结果是page=3，但是表单里的值全都不见了！这样的话就相当于服务端查询的时候，type的值为空，因为后台逻辑里面写的如果值为空的话，sql语句就不会添加这个查询条件。所以服务器返回给前端的数据就没有按type查找了。表单里的其他值也是一样的道理。</p>
<p>那么这样一来，服务端的代码逻辑错误就暂时排除了。那么问题在哪呢？为什么表单里的值获取不到呢？而第一次是正确的又是为什么呢？</p>
<p>2. 网页代码的定位</p>
<p>这个时候就需要思考的问题是表单中的值到底有没有被传到服务端去。因为表单里的值是post方式提交的，所以我打开了浏览器的F12工具，然后去查Network。</p>
<p>然后问题就出现了：第一次填写了表单之后，数据被POST到服务端，这是没有问题的；而第二次点击页码的时候，方法变成了GET，从而表单中的数据就无法提交上去了。</p>
<p>问题找到了，就是当点击页码的时候，form表单中的数据没有被提交到服务端去，造成这样的原因是什么呢？因为所点击的页码是一个a标签，它的链接在href中，当点击这个页码的时候，客户端就会以GET的方式往服务端发送请求。</p>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>到这里问题已经基本明确了，那么怎么解决这个问题呢？</p>
<p>再次描述一下背景。因为表单中填写的数据比较敏感，所以必须使用POST方式完成提交。</p>
<p>因为自己也不是搞web开发的，因此对于此类问题，如果原因搞明，那解决方案基本靠搜索引擎了（公司的网络可以访问Google，真心不错）。在网上搜了搜，可能是自己不会搜吧，大多数都是讲如何使用MySQL+php完成分页的，改了改关键字，终于找到一些可以沾边的网页。</p>
<p>仔细看了看，主要解决办法有：</p>
<p>1. ajax异步提交，发送POST请求</p>
<p>2. 表单中添加一个隐藏的页码控件，然后在a里面添加js函数来完成提交。</p>
<p>接下来一个一个试：</p>
<p>然后就遇到问题了，我并不熟悉ajax，原理也没有搞懂，试了好多下，有“成功”的，确实从服务端接收到数据了，但是覆盖在了原来的网页上面，而且数据依然有问题（可能是表单数据发送到后台的方式不正确）。</p>
<p>另外一个，在表单中添加隐藏的页码控件，有兴趣可以看看<a href="http://blog.csdn.net/arzhuo/article/details/6969516" target="_blank" rel="external">这个链接</a>，然而此时已经花了好长时间解决这个问题了，搞到这个时候其实已经很烦了，而且这个解决办法要改动的东西太多，并不是很满意。</p>
<p><strong>下班！</strong></p>
<p>次日早上这个问题才终于解决。</p>
<p>其实仔细想一下，这个问题可以这样解决（假如没有上网搜解决方案这个过程）：</p>
<p>1. 既然点击a使用的方法是GET，而点击“查找”按钮使用的方法是POST，那么可不可以让点击a标签实际上就是提交表单的动作呢？再把a里面的href带上。</p>
<p>那么可以使用jQuery这样子写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"li a"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        url = $(<span class="keyword">this</span>).attr(<span class="string">"href"</span>);     <span class="comment">// 获取这个a标签的href中的url</span></div><div class="line">        event.preventDefault();         <span class="comment">// 取消点击事件的默认动作</span></div><div class="line">        $(<span class="string">"form"</span>).attr(<span class="string">"action"</span>, url);  <span class="comment">// 修改form中的action动作</span></div><div class="line">        $(<span class="string">"form"</span>).submit();             <span class="comment">// 提交表单</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>就使用这么几行代码，直接改掉a标签的默认动作，然后问题也解决了。这个解决方案其实也是受到搜索出来的结果启发得到的，但是由于问题的具体场景不同，所以解决方案的复杂度也不一样。</p>
<p>2. 另一种方案：从服务端着手</p>
<p>既然第一次提交的数据第二次就“丢失”了，那么我可以在服务端将提交的数据保存到session中，以供后续查询使用。</p>
<p>这个实现起来逻辑将会比较混乱，所以跳转页面这部分算是实现了，但是又带来一些额外的问题。所以没有了继续搞下去的动力。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>解决这个小小的bug的过程真的是相当煎熬，明明可以解决，但有好几次就是跳过了正确的解决方案。在这个过程中暴露了一个问题：解决问题不带脑子。</p>
<p>因此总结一下解决问题的方法：</p>
<p>首先要正确定位bug，然后思考bug的原因，寻找解决方案。</p>
<p>首先定位bug：</p>
<p>1. 对于不可重现的bug，一定要在编码期间充分准备，随时用日志记录下状态。</p>
<p>2. 对于可重现的bug（比如这个例子），需要采取自上而下或自下而上的方法，或者“夹逼法”。从问题的一端起，逐步去验证，直到明白是从哪个地方起出了问题，或者在哪个阶段出了问题，然后再更进一步去找。</p>
<p>找到问题之后，就思考原因。有一点很重要，不写、不抄、不用看不懂的代码（这个和代码复用绝对不是一回事）。每一步都想清楚，哪一步与预期不一样那一步就出了问题。</p>
<p>寻找解决方案这个就说来就话长，可以修改代码使其与预期一致（推荐），比如这里js模拟提交的解决方案。还可以后期做修补，先把这部分所带来的影响绕过去，比如这里的session这个解决方案。等等，具体情况具体对待，但是道理和套路一定要清楚。</p>
<p>以上です。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;前段时间在搞一个网页页面，由于一些不可描述的原因，这部分无法完全套用现有框架，大部分代码只能用原生的php来开发。开发过程中遇到了一个比较蛋疼的问题。所幸终于解决，现在为了描述清楚，将问题简化抽象，将解决思路整理下来，让以后长点记性。&lt;/p&gt;
&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;问题是这样的：&lt;/p&gt;
&lt;p&gt;页面有一个form表单。主要用来执行一些查询功能。查询的结果是一个集合，要通过表格显示出来。当这个集合很大的时候，就要分页显示。&lt;/p&gt;
&lt;p&gt;代码大致如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="web前端" scheme="http://kiwi-yan.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="web开发" scheme="http://kiwi-yan.github.io/tags/web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://kiwi-yan.github.io/2016/07/31/hello-world/"/>
    <id>http://kiwi-yan.github.io/2016/07/31/hello-world/</id>
    <published>2016-07-31T15:26:08.617Z</published>
    <updated>2017-04-16T05:29:43.824Z</updated>
    
    <content type="html"><![CDATA[<p>这几天使用Hexo和Github为自己搭建了一个技术博客，在此记录下职业生涯中关于技术的一些点滴。以前在一些博客网站上写东西都没坚持下来，希望这次可以养成并保持这个良好的习惯。</p>
<p>下面是一些测试：</p>
<h1 id="这个是大标题"><a href="#这个是大标题" class="headerlink" title="这个是大标题"></a>这个是大标题</h1><h3 id="这个是小标题"><a href="#这个是小标题" class="headerlink" title="这个是小标题"></a>这个是小标题</h3><blockquote>
<p>这个是引用。</p>
</blockquote>
<p>这是一个普通段落，下边是一些代码片段。<br><a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello world."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>):</div><div class="line">    <span class="keyword">print</span> <span class="string">"The squared root of %d is %f"</span> % (i, math.sqrt(i))</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">      body &#123;</div><div class="line">        backgroundclolor: #FFCC99;</div><div class="line">      &#125;;</div><div class="line">      .abc &#123;</div><div class="line">        font-weight: 20pt;</div><div class="line">      &#125;;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"abc"</span>&gt;</span>Hello world.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"ok.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"number"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"xyz"</span> <span class="attr">vlaue</span>=<span class="string">"js test"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">      $(function()&#123;</div><div class="line">        $("#xyz").click(function()&#123;</div><div class="line">          $(this).hide();</div><div class="line">        &#125;);</div><div class="line">      &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    &lt;?php echo "PHP TEST"; ?&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"></div><div class="line">ls <span class="_">-l</span> | grep <span class="string">"root"</span> | awk <span class="string">'&#123; print $1 &#125;'</span></div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HEADER_H_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _HEADER_H_</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> sint;</div><div class="line"><span class="built_in">string</span> m = <span class="string">"This is a string."</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">class</span> Print &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Print(T x) &#123; <span class="built_in">cout</span> &lt;&lt; x; &#125; </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    Print&lt;<span class="keyword">int</span>&gt; a(<span class="number">8</span>);</div><div class="line">    Print&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; b(<span class="string">"foo"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试结束。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天使用Hexo和Github为自己搭建了一个技术博客，在此记录下职业生涯中关于技术的一些点滴。以前在一些博客网站上写东西都没坚持下来，希望这次可以养成并保持这个良好的习惯。&lt;/p&gt;
&lt;p&gt;下面是一些测试：&lt;/p&gt;
&lt;h1 id=&quot;这个是大标题&quot;&gt;&lt;a href=&quot;#这个是大标题&quot; class=&quot;headerlink&quot; title=&quot;这个是大标题&quot;&gt;&lt;/a&gt;这个是大标题&lt;/h1&gt;&lt;h3 id=&quot;这个是小标题&quot;&gt;&lt;a href=&quot;#这个是小标题&quot; class=&quot;headerlink&quot; title=&quot;这个是小标题&quot;&gt;&lt;/a&gt;这个是小标题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;这个是引用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是一个普通段落，下边是一些代码片段。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
